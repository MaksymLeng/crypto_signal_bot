import asyncio
from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from config import BOT_TOKEN, ADMINS, SUPERADMINS
from handlers import admin, superadmin, user
from utils.scheduler import check_scheduled_signals
import json

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")
)
dp = Dispatcher()

# –†–æ—É—Ç–∏–Ω–≥
dp.include_router(superadmin.router)
dp.include_router(admin.router)
dp.include_router(user.router)

async def main():
    try:
        print("üõ† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è users.json...")
        with open("database/users.json", "r+", encoding="utf-8") as f:
            users = json.load(f)
            for uid in SUPERADMINS:
                uid = str(uid)
                if uid not in users:
                    users[uid] = {"role": "superadmin"}
            for uid in ADMINS:
                uid = str(uid)
                if uid not in users:
                    users[uid] = {"role": "admin"}
            f.seek(0)
            json.dump(users, f, indent=2)
            f.truncate()
        print("‚úÖ users.json –≥–æ—Ç–æ–≤")

        await bot.delete_webhook(drop_pending_updates=True)
        print("üîÅ Webhook —É–¥–∞–ª—ë–Ω")

        print("üîÑ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤...")
        asyncio.create_task(check_scheduled_signals(bot))
        print("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω")

        print("üöÄ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è")
        await dp.start_polling(bot)

    except Exception as e:
        import traceback
        print("[FATAL] –ë–æ—Ç —É–ø–∞–ª —Å –æ—à–∏–±–∫–æ–π:")
        traceback.print_exc()


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except Exception as e:
        print(f"[FATAL] –ó–∞–ø—É—Å–∫ main() –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π: {e}")

