from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.send_signal import save_signal_for_later, send_signal_to_users
from config import SUPERADMINS, ADMINS
import os
import json

router = Router()

class SignalForm(StatesGroup):
    full_text = State()
    wait_time = State()

@router.message(Command("signal"))
async def start_signal(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ADMINS and user_id not in SUPERADMINS:
        return await message.answer("‚ùå You are not an admin. Please wait for signals from the bot.")

    await state.set_state(SignalForm.full_text)
    await message.answer("üìù –í–≤–µ–¥–∏ –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞:")

@router.message(SignalForm.full_text)
async def preview_signal(message: types.Message, state: FSMContext):
    signal_text = message.text
    await state.update_data(full_text=signal_text)

    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_now_full")],
        [InlineKeyboardButton(text="üïí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="send_later_full")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_signal")]
    ])

    await message.answer("‚úÖ –ü—Ä–æ–≤–µ—Ä—å —Ç–µ–∫—Å—Ç —Å–∏–≥–Ω–∞–ª–∞:")
    await message.answer(signal_text, reply_markup=buttons)

@router.callback_query(F.data == "send_now_full")
async def send_now_full(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("full_text")

    if not text:
        return await callback.message.answer("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞.")

    try:
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–≥–¥–µ –±—ã–ª –ø—Ä–µ–≤—å—é —Å–∏–≥–Ω–∞–ª–∞)
        await callback.message.delete()
    except Exception as e:
        print(f"[‚ö†] –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await callback.message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
    await send_signal_to_users(callback.bot, {"custom_text": text})
    await callback.message.answer("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    await state.clear()


@router.callback_query(F.data == "send_later_full")
async def ask_time_full(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SignalForm.wait_time)
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç HH:MM –ø–æ –ú–æ—Å–∫–≤–µ):")

@router.message(SignalForm.wait_time)
async def save_delayed_signal(message: types.Message, state: FSMContext):
    data = await state.get_data()
    text = data.get("full_text")

    if not text:
        return await message.answer("‚ö†Ô∏è –ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å–∏–≥–Ω–∞–ª–∞.")

    result = await save_signal_for_later({"custom_text": text}, message.text.strip())

    if result:
        await message.answer(result)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")

@router.callback_query(F.data == "cancel_signal")
async def cancel_signal(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ë–Ω.")

@router.message(Command("scheduled"))
async def view_scheduled(message: types.Message):
    user_id = str(message.from_user.id)

    with open("database/users.json", "r", encoding="utf-8") as f:
        users = json.load(f)

    if user_id not in users or users[user_id]["role"] not in ["admin", "superadmin"]:
        return await message.answer("‚ùå You are not an admin. Please wait for signals from the bot.")

    if not os.path.exists("database/signals.json"):
        return await message.answer("üì≠ –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")

    with open("database/signals.json", "r", encoding="utf-8") as f:
        signals = json.load(f)

    if not signals:
        return await message.answer("üì≠ –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")

    text = "üìù <b>–°–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:</b>\n\n"
    for s in signals:
        try:
            text += (
                f"üÜî <code>{s.get('id', '[–Ω–µ—Ç id]')}</code>\n"
                f"üïí {s.get('send_at', '[–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏]')}\n"
                f"üìã {s.get('custom_text', '[—Ç–µ–∫—Å—Ç –Ω–µ —É–∫–∞–∑–∞–Ω]')[:100]}...\n\n"
            )
        except Exception as e:
            print(f"[‚ùó] –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {s} ‚Üí {e}")

    await message.answer(text, parse_mode="HTML")

@router.message(Command("deletesignal"))
async def delete_scheduled(message: types.Message):
    user_id = str(message.from_user.id)

    with open("database/users.json", "r", encoding="utf-8") as f:
        users = json.load(f)

    if user_id not in users or users[user_id]["role"] not in ["admin", "superadmin"]:
        return await message.answer("‚ùå You are not an admin. Please wait for signals from the bot.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.answer(
            "‚ö† –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª, —É–∫–∞–∂–∏ –µ–≥–æ ID.\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/deletesignal 2391fc9a</code>\n"
            "üëâ –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ ID —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/scheduled</b>.",
            parse_mode="HTML"
        )

    signal_id = parts[1]

    try:
        with open("database/signals.json", "r+", encoding="utf-8") as f:
            signals = json.load(f)
            updated = [s for s in signals if s["id"] != signal_id]

            if len(signals) == len(updated):
                return await message.answer("‚ö† –°–∏–≥–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            f.seek(0)
            json.dump(updated, f, indent=2)
            f.truncate()

        await message.answer(f"üóë –°–∏–≥–Ω–∞–ª —Å ID <code>{signal_id}</code> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
