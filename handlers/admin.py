from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from utils.send_signal import save_signal_for_later
from utils.send_signal import send_signal_to_users
from config import SUPERADMINS, ADMINS
import os
import json

router = Router()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class SignalForm(StatesGroup):
    ticker = State()
    position = State()
    take = State()
    risk = State()
    style = State()
    wait_time = State()

# /signal
@router.message(Command("signal"))
async def start_signal(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in ADMINS and user_id not in SUPERADMINS:
        return await message.answer("‚ùå Anda bukan admin. Mohon tunggu sinyal selanjutnya dari bot ini.")

    await state.set_state(SignalForm.ticker)
    await message.answer("üîπ –í–≤–µ–¥–∏ —Ç–∏–∫–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: SEIUSDT)")

@router.message(SignalForm.ticker)
async def input_ticker(message: types.Message, state: FSMContext):
    await state.update_data(ticker=message.text)
    await state.set_state(SignalForm.position)
    await message.answer("üìà –í–≤–µ–¥–∏ –ø–æ–∑–∏—Ü–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: LONG 25x)")

@router.message(SignalForm.position)
async def input_position(message: types.Message, state: FSMContext):
    await state.update_data(position=message.text)
    await state.set_state(SignalForm.take)
    await message.answer("üéØ –í–≤–µ–¥–∏ Take Profit (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0.214)")

@router.message(SignalForm.take)
async def input_take(message: types.Message, state: FSMContext):
    await state.update_data(take=message.text)
    await state.set_state(SignalForm.risk)
    await message.answer("üí• –í–≤–µ–¥–∏ —Ä–∏—Å–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 30)")

@router.message(SignalForm.risk)
async def input_risk(message: types.Message, state: FSMContext):
    await state.update_data(risk=message.text)
    await state.set_state(SignalForm.style)

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="style_premium")],
        [InlineKeyboardButton(text="üî• –ü–∞–º–ø", callback_data="style_pumping")]
    ])
    await message.answer("üé® –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞:", reply_markup=keyboard)

@router.callback_query(F.data.startswith("style_"))
async def choose_style(callback: types.CallbackQuery, state: FSMContext):
    style = callback.data.split("_")[1]
    await state.update_data(style=style)

    data = await state.get_data()

    with open("templates/styles.json", "r", encoding="utf-8") as f:
        styles = json.load(f)
    template = styles[style]

    message_text = f"{template['title']}\n\n" + "\n".join([
        line.format(
            ticker=data['ticker'],
            position=data['position'],
            take=data['take'],
            risk=data['risk']
        ) for line in template['body']
    ]) + "\n\n" + template['footer']

    buttons = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–µ–π—á–∞—Å", callback_data="send_now")],
        [InlineKeyboardButton(text="üïí –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="send_later")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å—Ç–∏–ª—é", callback_data="back_to_style")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_signal")]
    ])

    await callback.message.answer("‚úÖ –°–∏–≥–Ω–∞–ª –≥–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ:")
    await callback.message.answer(message_text, reply_markup=buttons)

@router.callback_query(F.data == "back_to_style")
async def back_to_style(callback: types.CallbackQuery, state: FSMContext):
    await state.set_state(SignalForm.style)
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíé –ü—Ä–µ–º–∏—É–º", callback_data="style_premium")],
        [InlineKeyboardButton(text="üî• –ü–∞–º–ø", callback_data="style_pumping")]
    ])
    await callback.message.answer("üé® –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è —Å–∏–≥–Ω–∞–ª–∞:", reply_markup=keyboard)

@router.callback_query(F.data == "cancel_signal")
async def cancel_signal(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("‚ùå –°–∏–≥–Ω–∞–ª –æ—Ç–º–µ–Ω—ë–Ω.")

@router.callback_query(F.data == "send_now")
async def send_now(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()

    if data.get("already_sent"):
        await callback.message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–∞–Ω–µ–µ.")
        return

    await callback.message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é...")
    await send_signal_to_users(callback.bot, data)
    await callback.message.answer("‚úÖ –°–∏–≥–Ω–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    data["already_sent"] = True
    await state.set_data(data)


@router.callback_query(F.data == "send_later")
async def ask_time(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if data.get("already_sent"):
        await callback.message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç —Å–∏–≥–Ω–∞–ª —É–∂–µ –±—ã–ª –æ–±—Ä–∞–±–æ—Ç–∞–Ω.")
        return

    await state.set_state(SignalForm.wait_time)
    await callback.message.answer("‚è∞ –í–≤–µ–¥–∏ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (—Ñ–æ—Ä–º–∞—Ç HH:MM –ø–æ –ú–æ—Å–∫–≤–µ):")

@router.message(SignalForm.wait_time)
async def save_delayed_signal(message: types.Message, state: FSMContext):
    data = await state.get_data()
    result = await save_signal_for_later(data, message.text.strip())

    if result:
        await message.answer(result)
        await state.clear()
    else:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 16:30)")

@router.message(Command("scheduled"))
@router.message(Command("scheduled"))
async def view_scheduled(message: types.Message):
    user_id = str(message.from_user.id)

    with open("database/users.json", "r", encoding="utf-8") as f:
        users = json.load(f)

    if user_id not in users or users[user_id]["role"] not in ["admin", "superadmin"]:
        return await message.answer("‚ùå Anda bukan admin. Mohon tunggu sinyal selanjutnya dari bot ini.")

    if not os.path.exists("database/signals.json"):
        return await message.answer("üì≠ –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")

    with open("database/signals.json", "r", encoding="utf-8") as f:
        signals = json.load(f)

    if not signals:
        return await message.answer("üì≠ –ù–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤.")

    text = "üìù <b>–°–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:</b>\n\n"
    for s in signals:
        try:
            text += (
                f"üÜî <code>{s.get('id', '[–Ω–µ—Ç id]')}</code>\n"
                f"üïí {s.get('send_at', '[–Ω–µ—Ç –≤—Ä–µ–º–µ–Ω–∏]')}\n"
                f"üìä {s.get('ticker', '...')} ({s.get('position', '?')}) | üéØ Take: {s.get('take', '?')} | üî• Risk: {s.get('risk', '?')}%\n"
                f"üé® –°—Ç–∏–ª—å: {s.get('style', '-')}\n\n"
            )
        except Exception as e:
            print(f"[‚ùó] –û—à–∏–±–∫–∞ —Å–∏–≥–Ω–∞–ª–∞: {s} ‚Üí {e}")

    await message.answer(text, parse_mode="HTML")



@router.message(Command("deletesignal"))
async def delete_scheduled(message: types.Message):
    user_id = str(message.from_user.id)

    with open("database/users.json", "r", encoding="utf-8") as f:
        users = json.load(f)

    if user_id not in users or users[user_id]["role"] not in ["admin", "superadmin"]:
        return await message.answer("‚ùå Anda bukan admin. Mohon tunggu sinyal selanjutnya dari bot ini.")

    parts = message.text.strip().split()
    if len(parts) != 2:
        return await message.answer(
            "‚ö† –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å–∏–≥–Ω–∞–ª, —É–∫–∞–∂–∏ –µ–≥–æ ID.\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>/deletesignal 2391fc9a</code>\n"
            "üëâ –ü–æ—Å–º–æ—Ç—Ä–∏ —Å–ø–∏—Å–æ–∫ ID —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã <b>/scheduled</b>.",
            parse_mode="HTML"
        )

    signal_id = parts[1]

    try:
        with open("database/signals.json", "r+", encoding="utf-8") as f:
            signals = json.load(f)
            updated = [s for s in signals if s["id"] != signal_id]

            if len(signals) == len(updated):
                return await message.answer("‚ö† –°–∏–≥–Ω–∞–ª —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            f.seek(0)
            json.dump(updated, f, indent=2)
            f.truncate()

        await message.answer(f"üóë –°–∏–≥–Ω–∞–ª —Å ID <code>{signal_id}</code> —É–¥–∞–ª—ë–Ω.", parse_mode="HTML")

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
